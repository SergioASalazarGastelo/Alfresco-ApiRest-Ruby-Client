=begin
#Alfresco Content Services REST API

#**Core API**  Provides access to the core features of Alfresco Content Services. 

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ProbesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Check readiness and liveness of the repository
    # **Note:** this endpoint is available in Alfresco 6.0 and newer versions.  Returns a status of 200 to indicate success and 503 for failure.  The readiness probe is normally only used to check repository startup.  The liveness probe should then be used to check the repository is still responding to requests.  **Note:** No authentication is required to call this endpoint. 
    # @param probe_id The name of the probe: * -ready- * -live- 
    # @param [Hash] opts the optional parameters
    # @return [ProbeEntry]
    def get_probe(probe_id, opts = {})
      data, _status_code, _headers = get_probe_with_http_info(probe_id, opts)
      return data
    end

    # Check readiness and liveness of the repository
    # **Note:** this endpoint is available in Alfresco 6.0 and newer versions.  Returns a status of 200 to indicate success and 503 for failure.  The readiness probe is normally only used to check repository startup.  The liveness probe should then be used to check the repository is still responding to requests.  **Note:** No authentication is required to call this endpoint. 
    # @param probe_id The name of the probe: * -ready- * -live- 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProbeEntry, Fixnum, Hash)>] ProbeEntry data, response status code and response headers
    def get_probe_with_http_info(probe_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProbesApi.get_probe ..."
      end
      # verify the required parameter 'probe_id' is set
      fail ArgumentError, "Missing the required parameter 'probe_id' when calling ProbesApi.get_probe" if probe_id.nil?
      # resource path
      local_var_path = "/probes/{probeId}".sub('{format}','json').sub('{' + 'probeId' + '}', probe_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProbeEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProbesApi#get_probe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
